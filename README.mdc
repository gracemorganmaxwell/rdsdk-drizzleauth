# **RedwoodSDK with Drizzle ORM: A Production-Ready CMS**

## **Document 1: High-Level Plan & Architecture**

### **Development Environment**

- **Package Manager:** This project uses `pnpm`. Use `pnpm install` to install dependencies and `pnpm dev` to start the development server.

### **Development Principles**

- **Test-Driven Design (TDD):** Development will strictly follow TDD principles. For each piece of functionality, a corresponding test will be written _first_ using **Vitest** to define and verify requirements. The goal is to focus on testing functionality to ensure robust and reliable code.
- **Strict TypeScript:** The codebase will adhere to strict TypeScript rules. The `any` type is forbidden. All shared types will be clearly defined to ensure type safety across the application.
- **Domain-Driven Design & Singleton Principle:** The architecture will follow established Domain-Driven Design patterns. Before implementing new functionality, the developer will look for existing implementations to ensure consistency and adherence to the Single Responsibility Principle.

### **Project Goal: Gracie's Custard OS - CMS Feature**

- **Status:** âœ… **Completed**
- **Goal:** Build a complete, production-ready Content Management System (CMS) for "Gracie's Custard OS."
- **User:** A single administrator who can manage `Posts`, `Projects`, `Tags`, and `Images`.
- **Architecture:** RedwoodSDK with React Server Components, Server Functions, and **Drizzle ORM** connecting to a Cloudflare D1 database. Styling has been implemented with **Tailwind CSS**.

### **Architectural Overview**

- **Server Components (Default):** Run on the server (Cloudflare Worker) and are used for data fetching, directly awaiting Drizzle database calls.
- **Client Components (`"use client"`):** Used for all user interactivity (state, forms, buttons). All CMS forms and interactive UI elements are Client Components.
- **Server Actions (`"use server"`):** Secure, server-run functions used for all backend data mutations (Create, Update, Delete). They can be called directly from Client Components.
- **`src/worker.tsx` (Router & Middleware):** The application's entry point, defining all routes and middleware. It protects the entire `/admin` route prefix with an authentication layer.
- **Layouts:** A main `AdminLayout.tsx` provides a unified UI shell for the CMS, applied to all admin pages.

---

## **Document 2: CMS Core Shell & Authentication**

- [x] **Shared Types:** `src/app/types.ts` created.
- [x] **Admin Layout & Core Components:**
  - [x] `AdminLayout.tsx` created.
  - [x] `AdminSidebar.tsx` created.
  - [x] `AdminHeader.tsx` created.
  - [x] `AdminDashboardPage.tsx` created.
- [x] **Routing & Authentication:**
  - [x] All admin routes are defined and grouped under a `/admin` prefix in `src/worker.tsx`.
  - [x] An authentication middleware protects the `/admin` prefix, redirecting unauthenticated users to `/user/login`.

---

## **Document 3: Full CRUD Implementation**

The following pattern was successfully implemented for all four content types: `Posts`, `Projects`, `Tags`, and `Images`.

### **Implementation Pattern**

- **[x] Validation Schemas (`/lib/validation/`):** Zod schemas were created for each content type to validate new and updated data.

- **[x] Server Actions (`/pages/admin/.../serverFunctions.ts`):**

  - `create`, `update`, and `delete` server actions were implemented for each content type.
  - **Critical Pattern:** Server actions handle form data, including correcting boolean values from checkboxes (e.g., converting `"on"` to `true`). On successful database operations, they **return a `{ success: true }` object.**
  - **Example `updateProject` data handling:**
    ```typescript
    // src/app/pages/admin/projects/serverFunctions.ts
    const formValues = Object.fromEntries(formData.entries());
    const parsed = updateProjectSchema.safeParse({
      ...formValues,
      featured: formValues.featured === "on",
    });
    // ...
    ```

- **[x] Reusable Forms (`/components/forms/`):**

  - All forms use React's `useFormState` hook to manage form state and display validation errors returned from the server.
  - **Critical Pattern:** A `useEffect` hook monitors the `success` state returned from the server action. Upon success, it triggers a client-side redirect back to the list page.
  - **Example `PostForm` redirect logic:**

    ```tsx
    // src/app/components/forms/PostForm.tsx
    "use client";
    import { useFormState } from "react-dom";
    import { useEffect } from "react";
    import { link } from "@/app/shared/links";
    // ...

    export function PostForm({ action, initialData }: PostFormProps) {
      const [state, formAction] = useFormState(action, { success: false });

      useEffect(() => {
        if (state.success) {
          window.location.href = link("/admin/posts");
        }
      }, [state.success]);

      return <form action={formAction}>{/* ... form fields ... */}</form>;
    }
    ```

- **[x] Pages (`/pages/admin/.../`):**

  - List pages (`PostsPage.tsx`, etc.) were created to fetch and display all items of a content type.
  - New pages (`NewPostPage.tsx`, etc.) were created to render the form for creating new items.
  - Edit pages (`EditPostPage.tsx`, etc.) were created to fetch a single item and render the form pre-filled with `initialData`.

- **[x] Delete Functionality:**
  - A `delete` server action was created for each content type.
  - List pages include a "Delete" button within a form to call the action.

---

